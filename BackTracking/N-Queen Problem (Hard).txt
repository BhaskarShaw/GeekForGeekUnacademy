The n-queens puzzle is the problem of placing n queens on a (n×n) chessboard such that no two queens can attack each other.
Given an integer n, find all distinct solutions to the n-queens puzzle. Each solution contains distinct board configurations of the n-queens’ placement, where the solutions are a permutation of [1,2,3..n] in increasing order, here the number in the ith place denotes that the ith-column queen is placed in the row with that number. For eg below figure represents a chessboard [3 1 4 2].

Example 1:
Input:
1
Output:
[1]
Explaination:
Only one queen can be placed 
in the single cell available.

Example 2:
Input:
4
Output:
[2 4 1 3 ] [3 1 4 2 ]
Explaination:
These are the 2 possible solutions.
 
Expected Time Complexity: O(n!)
Expected Auxiliary Space: O(n2)

ANSWER : 

class Solution{
    static ArrayList<ArrayList<Integer>> nQueen(int n) {
        // code here
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        int[][] check = new int[n][n];
        ArrayList<Integer> list = new ArrayList<Integer>();
        queen(res, list, check, n, 0);
        return res;
    }
    static void queen(ArrayList<ArrayList<Integer>> res, ArrayList<Integer> list, int[][] check, int n, int cur_index)
    {
        if(n == cur_index)
        {
            res.add(new ArrayList<Integer>(list));
            return;
        }
        for(int i=0; i<n; i++)
        {
            if(isValid(cur_index, i, check))
            {
                list.add(i+1);
                check[cur_index][i] = 1;
                queen(res, list, check, n, cur_index+1);
                list.remove(list.size()-1);
                check[cur_index][i] = 0;
            }
        }
    }
    static boolean isValid(int row, int col, int[][] check)
    {
        for(int i=row; i>=0; i--)
        {
            if(check[i][col] == 1)
                return false;
        }
        for(int i=row, j=col; i>=0&&j>=0; i--,j--)
        {
            if(check[i][j] == 1)
                return false;
        }
        for(int i=row, j=col; i>=0&&j<check.length; i--,j++)
        {
            if(check[i][j] == 1)
                return false;
        }
        return true;
    }
}
