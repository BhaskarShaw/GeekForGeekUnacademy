/*Given an incomplete Sudoku configuration in terms of a 9 x 9  2-D square matrix (grid[][]), the task to find a solved Sudoku. For simplicity, you may assume that there will be only one unique solution.

Sample Sudoku for you to get the logic for its solution:

Example 1:

Input:
grid[][] = 
[[3 0 6 5 0 8 4 0 0],
[5 2 0 0 0 0 0 0 0],
[0 8 7 0 0 0 0 3 1 ],
[0 0 3 0 1 0 0 8 0],
[9 0 0 8 6 3 0 0 5],
[0 5 0 0 9 0 6 0 0],
[1 3 0 0 0 0 2 5 0],
[0 0 0 0 0 0 0 7 4],
[0 0 5 2 0 6 3 0 0]]
Output:
3 1 6 5 7 8 4 9 2
5 2 9 1 3 4 7 6 8
4 8 7 6 2 9 5 3 1
2 6 3 4 1 5 9 8 7
9 7 4 8 6 3 1 2 5
8 5 1 7 9 2 6 4 3
1 3 8 9 4 7 2 5 6
6 9 2 3 5 1 8 7 4
7 4 5 2 8 6 3 1 9

Your Task:
You need to complete the two functions:
SolveSudoku(): Takes a grid as its argument and returns true if a solution is possible and false if it is not.
printGrid(): Takes a grid as its argument and prints the 81 numbers of the solved Sudoku in a single line with space separation.


Expected Time Complexity: O(9^(N*N)).
Expected Auxiliary Space: O(N*N).

ANSWER : */

class Solution
{
    //Function to find a solved Sudoku. 
    static boolean SolveSudoku(int grid[][])
    {
        int[][] col = new int[9][10];
        int[][] row = new int[9][10];
        int[][] box = new int[9][10];
        for(int i=0; i<9; i++)
        {
            for(int j=0; j<9; j++)
            {
                int box_index = (i/3)*3+j/3;
                if(grid[i][j] != 0)
                {
                    col[j][ grid[i][j] ] = 1;
                    row[i][ grid[i][j] ] = 1;
                    box[box_index][ grid[i][j] ] = 1;
                }
            }
        }
        return Sudoku(grid, col, row, box, 0, 0);
    }
    static boolean Sudoku(int[][] grid, int[][] col, int[][] row, int[][] box, int r, int c)
    {
        if(r>8)
            return true;
        if(grid[r][c] == 0)
        {
            for(int i=1; i<=9; i++)
            {
                if(isValid(i, col, row, box, r, c))
                {
                    placeNumber(grid, col, row, box, r, c, i);
                    boolean bool = nextPosition(grid, col, row, box, r, c);
                    if(bool)
                        return bool;
                    removeNumber(grid, col, row, box, r, c, i);
                }
            }
        }
        else
        {
            boolean bool = nextPosition(grid, col, row, box, r, c);
            if(bool)
                return bool;
        }
        return false;
    }
    
    static boolean isValid(int num, int[][] col, int[][] row, int[][] box, int r, int c)
    {
        int box_index = (r/3)*3+c/3; 
        int res = col[c][ num ] + row[r][ num ] + box[box_index][ num ];
        if(res == 0)
            return true;
        return false;
    }
    static boolean nextPosition(int[][] grid, int[][] col, int[][] row, int[][] box, int r, int c)
    {
        if(c<8)
            c++;
        else
        {
            r++;
            c=0;
        }
        return Sudoku(grid, col, row, box, r, c);
    }
    static void placeNumber(int[][] grid, int[][] col, int[][] row, int[][] box, int r, int c, int num)
    {
        int box_index = (r/3)*3+c/3;
        grid[r][c] = num;
        col[c][ num ] = 1;
        row[r][ num ] = 1;
        box[box_index][ num ] = 1;
    }
    static void removeNumber(int[][] grid, int[][] col, int[][] row, int[][] box, int r, int c, int num)
    {
        int box_index = (r/3)*3+c/3;
        grid[r][c] = 0;
        col[c][ num ] = 0;
        row[r][ num ] = 0;
        box[box_index][ num ] = 0;
    }
    
    //Function to print grids of the Sudoku.
    static void printGrid (int grid[][])
    {
        // add your code here
        for(int i=0; i<9; i++)
        {
            for(int j=0; j<9; j++)
            {
                System.out.print(grid[i][j]+" ");
            }
        }
    }
}

