Example 1:
Input:
1
Output:
[1]
Explaination:
Only one queen can be placed 
in the single cell available.

Example 2:
Input:
4
Output:
[2 4 1 3 ] [3 1 4 2 ]
Explaination:
These are the 2 possible solutions.



ANSWER : 

class Solution{
    static ArrayList<ArrayList<Integer>> nQueen(int n) {
        // code here
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        BitSet col = new BitSet(n);
        BitSet ld = new BitSet(2*n-1);
        BitSet rd = new BitSet(2*n-1);
        ArrayList<Integer> list = new ArrayList<Integer>();
        queen(res, list, n, 0, col, ld, rd);
        return res;
    }
    static void queen(ArrayList<ArrayList<Integer>> res, ArrayList<Integer> list, int n, int cur_index, BitSet col, BitSet ld, BitSet rd)
    {
        if(n == cur_index)
        {
            res.add(new ArrayList<Integer>(list));
            return;
        }
        for(int i=0; i<n; i++)
        {
            if( !(col.get(i) || ld.get(cur_index-i+n-1) || rd.get(cur_index+i)) )
            {
                col.set(i);
                ld.set(cur_index-i+n-1);
                rd.set(cur_index+i);
                
                list.add(i+1);
                
                queen(res, list, n, cur_index+1, col, ld, rd);
                
                list.remove(list.size()-1);
                
                col.set(i, false);
                ld.set(cur_index-i+n-1, false);
                rd.set(cur_index+i, false);
            }
        }
    }
}
