
// Balanced Tree with PreOrder, InOrder and PostOrder functions.
import java.util.*;

class TreePractice {
    
    class node
	{
	    int data;
	    node left;
	    node right;
	    int lcount;
	    int rcount;
	    
	    node(int data)
	    {
	        this.data = data;
	        lcount = rcount = 0;
	        left = null;
	        right = null;
	    }
	}
	
	public boolean isPBT(int count)
	{
	    count += 1;
	    
	    while( (count&1) == 0)
	        count >>= 1;
        
        if(count == 1)
            return true;
        return false;
	}
	
	public node build(node root, int d)
	{
	    if(root == null)
	    {
            node root_node = new node(d);
            return root_node;
	    }
	    if(root.rcount == root.lcount)
	    {
	        root.left = build(root.left, d);
	        root.lcount += 1;
	    }
        else if(root.rcount < root.lcount)
        {
            if(isPBT(root.lcount))
            {
                root.right = build(root.right, d);
                root.rcount += 1;
            }
            else
            {
                root.left = build(root.left, d);
                root.lcount += 1;
            }
        }
        return root;
	}
    
    void preOrder(node root)
    {
        if(root == null)
            return;
        System.out.print(root.data+" ");
        preOrder(root.left);
        preOrder(root.right);
    }
    
    void inOrder(node root)
    {
        if(root == null)
            return;
        inOrder(root.left);
        System.out.print(root.data+" ");
        inOrder(root.right);
    }
    
    void postOrder(node root)
    {
        if(root == null)
            return;
        postOrder(root.left);
        postOrder(root.right);
        System.out.print(root.data+" ");
    }
    
	public static void main (String[] args) {
		
		int arr[] = { 8, 6, 7, 12, 5, 1, 9 };
		node root = null;
		TreePractice ob = new TreePractice();
		for(int a : arr)
		    root = ob.build(root, a);
        
		System.out.println("Pre Order:");
		ob.preOrder(root);
		System.out.println();
		
		System.out.println("In Order:");
		ob.inOrder(root);
		System.out.println();
		
        System.out.println("Post Order:");
		ob.postOrder(root);
	}
}
